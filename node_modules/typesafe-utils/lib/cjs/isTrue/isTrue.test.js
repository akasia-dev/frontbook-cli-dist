"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isTrue_1 = require("./isTrue");
const test = uvu_1.suite('true');
const trueValues = [true];
const notTrueValues = [-Infinity, -1, 1, Infinity, 'test', [], {}, undefined, null, 0, '', false];
// isTrue -------------------------------------------------------------------------------------------------------------
trueValues.forEach((value) => test(`isTrue ${value}`, () => assert.ok(isTrue_1.isTrue(value))));
notTrueValues.forEach((value) => test(`! isTrue ${value}`, () => assert.not(isTrue_1.isTrue(value))));
const _trueType = [...trueValues, notTrueValues].filter(isTrue_1.isTrue);
const _neverType = notTrueValues.filter(isTrue_1.isTrue);
// isNotTrue ----------------------------------------------------------------------------------------------------------
notTrueValues.forEach((value) => test(`isNotTrue ${value}`, () => assert.ok(isTrue_1.isNotTrue(value))));
trueValues.forEach((value) => test(`! isNotTrue ${value}`, () => assert.not(isTrue_1.isNotTrue(value))));
const _allNotType = [...trueValues, ...notTrueValues].filter(isTrue_1.isNotTrue);
// const _neverNotType: never[] = trueValues.filter(isNotTrue)
// isPropertyTrue -----------------------------------------------------------------------------------------------------
test(`isPropertyTrue available`, () => {
    const items = [{ available: true }, { available: 'some-id' }, { available: null }];
    const filteredItems = items.filter(isTrue_1.isPropertyTrue('available'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotTrue --------------------------------------------------------------------------------------------------
test(`isPropertyNotTrue available`, () => {
    const items = [{ available: 0 }, { available: true }, { available: null }];
    const filteredItems = items.filter(isTrue_1.isPropertyNotTrue('available'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesTrue --------------------------------------------------------------------------------------------------
test(`arePropertiesTrue available inStock`, () => {
    const items = [
        { available: 'some-id', inStock: true },
        { available: true, inStock: true },
        { available: 'some-id', inStock: false },
        { available: null, inStock: true },
    ];
    const filteredItems = items.filter(isTrue_1.arePropertiesTrue('available', 'inStock'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotTrue -----------------------------------------------------------------------------------------------
test(`arePropertiesNotTrue available inStock`, () => {
    const items = [
        { available: 'some-id', inStock: true },
        { available: true, inStock: true },
        { available: 'some-id', inStock: false },
        { available: null, inStock: true },
    ];
    const filteredItems = items.filter(isTrue_1.arePropertiesNotTrue('available', 'inStock'));
    assert.ok(filteredItems.length === 1);
});
test.run();
