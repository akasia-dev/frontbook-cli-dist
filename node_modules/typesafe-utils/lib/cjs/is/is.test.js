"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const is_1 = require("./is");
const test = uvu_1.suite('is');
// is -----------------------------------------------------------------------------------------------------------------
test(`is 5`, () => {
    const items = [1, 5, 8, 5, 33];
    const filteredItems = items.filter(is_1.is(5));
    assert.ok(filteredItems.length === 2);
});
// isNot --------------------------------------------------------------------------------------------------------------
test(`isNot 'text'`, () => {
    const items = ['text', 'another-text', null, ''];
    const filteredItems = items.filter(is_1.isNot('text'));
    assert.ok(filteredItems.length === 3);
});
// isProperty ---------------------------------------------------------------------------------------------------------
test(`isProperty id 42`, () => {
    const items = [{ id: 46 }, { id: 42 }, { id: undefined }];
    const filteredItems = items.filter(is_1.isProperty('id', 42));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNot ------------------------------------------------------------------------------------------------------
test(`isPropertyNot id null`, () => {
    const items = [{ id: 1 }, { id: null }, { id: undefined }];
    const filteredItems = items.filter(is_1.isPropertyNot('id', null));
    assert.ok(filteredItems.length === 2);
});
test.run();
