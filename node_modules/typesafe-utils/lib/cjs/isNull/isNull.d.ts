import { TypeGuard, TypeGuardInverted } from '../types';
export declare const isNull: <T>(value: T) => value is TypeGuard<null, T>;
export declare const isNotNull: <T>(value: T) => value is TypeGuardInverted<null, T>;
export declare const isPropertyNull: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotNull: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesNull: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotNull: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
