"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isNull_1 = require("./isNull");
const test = uvu_1.suite('null');
const nullValues = [null];
const notNullValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}, undefined, 0, '', false];
// isNull -------------------------------------------------------------------------------------------------------------
nullValues.forEach((value) => test(`isNull ${value}`, () => assert.ok(isNull_1.isNull(value))));
notNullValues.forEach((value) => test(`! isNull ${value}`, () => assert.not(isNull_1.isNull(value))));
const _nullType = [...nullValues, notNullValues].filter(isNull_1.isNull);
const _neverType = notNullValues.filter(isNull_1.isNull);
// isNotNull ----------------------------------------------------------------------------------------------------------
notNullValues.forEach((value) => test(`isNotNull ${value}`, () => assert.ok(isNull_1.isNotNull(value))));
nullValues.forEach((value) => test(`! isNotNull ${value}`, () => assert.not(isNull_1.isNotNull(value))));
const _allNotType = [...nullValues, ...notNullValues].filter(isNull_1.isNotNull);
const _neverNotType = nullValues.filter(isNull_1.isNotNull);
// isPropertyNull -----------------------------------------------------------------------------------------------------
test(`isPropertyNotNull id`, () => {
    const items = [{ id: 0 }, { id: undefined }, { id: null }];
    const filteredItems = items.filter(isNull_1.isPropertyNull('id'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotUndefined ---------------------------------------------------------------------------------------------
test(`isPropertyNotNull id`, () => {
    const items = [{ id: undefined }, { id: 1 }, { id: null }];
    const filteredItems = items.filter(isNull_1.isPropertyNotNull('id'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesNull --------------------------------------------------------------------------------------------------
test(`arePropertiesNull id name`, () => {
    const items = [
        { id: null, name: 'name-1' },
        { id: 0, name: null },
        { id: undefined, name: 'name-1' },
        { id: null, name: null },
    ];
    const filteredItems = items.filter(isNull_1.arePropertiesNull('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotNull ---------------------------------------------------------------------------------------------
test(`arePropertiesNotNull id name`, () => {
    const items = [
        { id: null, name: 'name-1' },
        { id: 0, name: null },
        { id: undefined, name: 'name-1' },
        { id: null, name: null },
    ];
    const filteredItems = items.filter(isNull_1.arePropertiesNotNull('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
test.run();
