"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const filterDuplicates_1 = require("./filterDuplicates");
const test = uvu_1.suite('filterDuplicates');
// filterDuplicates ---------------------------------------------------------------------------------------------------
test(`filter duplicate numbers`, () => {
    const items = [1, 2, 3, 5, 8, 1];
    const filteredItems = items.filter(filterDuplicates_1.filterDuplicates);
    assert.ok(filteredItems.length === 5);
    assert.ok(filteredItems.filter((nr) => nr === 1).length === 1);
});
test(`filter duplicate objects`, () => {
    const item1 = { id: 1 };
    const item2 = { id: 2 };
    const items = [item1, item2, item1];
    const filteredItems = items.filter(filterDuplicates_1.filterDuplicates);
    assert.ok(filteredItems.length === 2);
    assert.ok(filteredItems.includes(item2));
    assert.ok(filteredItems.filter((item) => item === item1).length === 1);
});
// filterDuplicatesByKey ----------------------------------------------------------------------------------------------
test(`filter duplicate IDs`, () => {
    const items = [{ id: 1 }, { id: 2 }, { id: 1 }];
    const filteredItems = items.filter(filterDuplicates_1.filterDuplicatesByKey('id'));
    assert.ok(filteredItems.length === 2);
    assert.ok(filteredItems.filter(({ id }) => id === 1).length === 1);
});
test(`filter duplicate names`, () => {
    const items = [
        { id: 1, name: 'name-1' },
        { id: 2, name: 'name-2' },
        { id: 3, name: 'name-1' },
        { id: 4, name: 'name-2' },
    ];
    const filteredItems = items.filter(filterDuplicates_1.filterDuplicatesByKey('name'));
    assert.ok(filteredItems.length === 2);
    assert.ok(filteredItems.filter(({ name }) => name === 'name-1').length === 1);
    const item2 = filteredItems.find(({ name }) => name === 'name-2');
    assert.ok(item2 && item2.id === 2);
});
test.run();
