"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isZero_1 = require("./isZero");
const test = uvu_1.suite('zero');
const zeroValues = [0];
const notZeroValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}, undefined, null, '', false];
// isZero -------------------------------------------------------------------------------------------------------------
zeroValues.forEach((value) => test(`isZero ${value}`, () => assert.ok(isZero_1.isZero(value))));
notZeroValues.forEach((value) => test(`! isZero ${value}`, () => assert.not(isZero_1.isZero(value))));
const _zeroType = [...zeroValues, notZeroValues].filter(isZero_1.isZero);
const _neverType = notZeroValues.filter(isZero_1.isZero);
// isNotZero ----------------------------------------------------------------------------------------------------------
notZeroValues.forEach((value) => test(`isNotZero ${value}`, () => assert.ok(isZero_1.isNotZero(value))));
zeroValues.forEach((value) => test(`! isNotZero ${value}`, () => assert.not(isZero_1.isNotZero(value))));
const _allNotType = [...zeroValues, ...notZeroValues].filter(isZero_1.isNotZero);
const _neverNotType = zeroValues.filter(isZero_1.isNotZero);
// isPropertyZero -----------------------------------------------------------------------------------------------------
test(`isPropertyZero id`, () => {
    const items = [{ id: 0 }, { id: undefined }, { id: null }];
    const filteredItems = items.filter(isZero_1.isPropertyZero('id'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotZero --------------------------------------------------------------------------------------------------
test(`isPropertyNotZero id`, () => {
    const items = [{ id: 0 }, { id: 1 }, { id: null }];
    const filteredItems = items.filter(isZero_1.isPropertyNotZero('id'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesZero --------------------------------------------------------------------------------------------------
test(`arePropertiesZero id count`, () => {
    const items = [
        { id: 0, count: 0 },
        { id: undefined, count: 0 },
        { id: 0, count: null },
        { id: null, count: 12 },
    ];
    const filteredItems = items.filter(isZero_1.arePropertiesZero('id', 'count'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotZero -----------------------------------------------------------------------------------------------
test(`arePropertiesNotZero id count`, () => {
    const items = [
        { id: 0, count: 0 },
        { id: undefined, count: 0 },
        { id: 0, count: null },
        { id: null, count: 12 },
    ];
    const filteredItems = items.filter(isZero_1.arePropertiesNotZero('id', 'count'));
    assert.ok(filteredItems.length === 1);
});
test.run();
