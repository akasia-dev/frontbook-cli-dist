import { TypeGuardWithReturnType, TypeGuardInverted } from '../types';
export declare const isZero: <T>(value: 0 | T) => value is TypeGuardWithReturnType<number, T, 0>;
export declare const isNotZero: <T>(value: T) => value is TypeGuardInverted<0, T>;
export declare const isPropertyZero: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotZero: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesZero: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotZero: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
