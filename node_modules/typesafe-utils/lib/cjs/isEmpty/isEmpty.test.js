"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isEmpty_1 = require("./isEmpty");
const test = uvu_1.suite('empty');
const emptyValues = [''];
const notEmptyValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}, undefined, null, 0, false];
// isEmpty ------------------------------------------------------------------------------------------------------------
emptyValues.forEach((value) => test(`isEmpty ${value}`, () => assert.ok(isEmpty_1.isEmpty(value))));
notEmptyValues.forEach((value) => test(`! isEmpty ${value}`, () => assert.not(isEmpty_1.isEmpty(value))));
const _emptyType = [...emptyValues, notEmptyValues].filter(isEmpty_1.isEmpty);
const _neverType = notEmptyValues.filter(isEmpty_1.isEmpty);
// isNotEmpty ---------------------------------------------------------------------------------------------------------
notEmptyValues.forEach((value) => test(`isNotEmpty ${value}`, () => assert.ok(isEmpty_1.isNotEmpty(value))));
emptyValues.forEach((value) => test(`! isNotEmpty ${value}`, () => assert.not(isEmpty_1.isNotEmpty(value))));
const _allNotType = [...emptyValues, ...notEmptyValues].filter(isEmpty_1.isNotEmpty);
const _neverNotType = emptyValues.filter(isEmpty_1.isNotEmpty);
// isPropertyEmpty ----------------------------------------------------------------------------------------------------
test(`isPropertyEmpty name`, () => {
    const items = [{ name: 'name-1' }, { name: '' }, { name: undefined }];
    const filteredItems = items.filter(isEmpty_1.isPropertyEmpty('name'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotEmpty -------------------------------------------------------------------------------------------------
test(`isPropertyNotEmpty name`, () => {
    const items = [{ name: null }, { name: 'name-2' }, { name: '' }];
    const filteredItems = items.filter(isEmpty_1.isPropertyNotEmpty('name'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesEmpty -------------------------------------------------------------------------------------------------
test(`arePropertiesEmpty name role`, () => {
    const items = [
        { name: 'name-1', role: 'ADMIN' },
        { name: 'name-1', role: '' },
        { name: '', role: '' },
        { name: '', role: 'ADMIN' },
    ];
    const filteredItems = items.filter(isEmpty_1.arePropertiesEmpty('name', 'role'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotEmpty ----------------------------------------------------------------------------------------------
test(`arePropertiesEmpty name role`, () => {
    const items = [
        { name: 'name-1', role: 'ADMIN' },
        { name: 'name-1', role: '' },
        { name: '', role: '' },
        { name: '', role: 'ADMIN' },
    ];
    const filteredItems = items.filter(isEmpty_1.arePropertiesNotEmpty('name', 'role'));
    assert.ok(filteredItems.length === 1);
});
test.run();
