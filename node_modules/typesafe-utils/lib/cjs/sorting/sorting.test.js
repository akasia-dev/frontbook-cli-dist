"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const sorting_1 = require("./sorting");
const test = uvu_1.suite('sorting');
// number -------------------------------------------------------------------------------------------------------------
test(`sortNumberASC`, () => {
    const items = [123, null, 0, -10];
    const sortedItems = items.sort(sorting_1.sortNumberASC);
    assert.equal(sortedItems, [null, -10, 0, 123]);
});
test(`sortNumberDESC`, () => {
    const items = [12, -3, 0];
    const sortedItems = items.sort(sorting_1.sortNumberDESC);
    assert.equal(sortedItems, [12, 0, -3]);
});
test(`sortNumberPropertyASC`, () => {
    const items = [{ a: 12 }, { a: -3 }];
    const sortedItems = items.sort(sorting_1.sortNumberPropertyASC('a'));
    assert.equal(sortedItems, [{ a: -3 }, { a: 12 }]);
});
test(`sortNumberPropertyDESC`, () => {
    const items = [{ t: 0 }, { t: 100 }];
    const sortedItems = items.sort(sorting_1.sortNumberPropertyDESC('t'));
    assert.equal(sortedItems, [{ t: 100 }, { t: 0 }]);
});
// string -------------------------------------------------------------------------------------------------------------
test(`sortStringASC`, () => {
    const items = ['z', null, 'A', ''];
    const sortedItems = items.sort(sorting_1.sortStringASC);
    assert.equal(sortedItems, [null, '', 'A', 'z']);
});
test(`sortStringDESC`, () => {
    const items = ['z', 'B', 'a'];
    const sortedItems = items.sort(sorting_1.sortStringASC);
    assert.equal(sortedItems, ['a', 'B', 'z']);
});
test(`sortStringASC Upper-/Lowercase`, () => {
    const items = ['hi', 'hI', 'Hi', 'HI'];
    const sortedItems = items.sort(sorting_1.sortStringASC);
    assert.equal(sortedItems, items);
    const items2 = ['HI', 'hI', 'Hi', 'hi'];
    const sortedItems2 = items2.sort(sorting_1.sortStringASC);
    assert.equal(sortedItems2, items2);
});
test(`sortStringPropertyASC`, () => {
    const items = [{ a: 'z' }, { a: 'b' }];
    const sortedItems = items.sort(sorting_1.sortStringPropertyASC('a'));
    assert.equal(sortedItems, [{ a: 'b' }, { a: 'z' }]);
});
test(`sortStringPropertyDESC`, () => {
    const items = [{ t: 'a' }, { t: 'c' }];
    const sortedItems = items.sort(sorting_1.sortStringPropertyDESC('t'));
    assert.equal(sortedItems, [{ t: 'c' }, { t: 'a' }]);
});
// date ---------------------------------------------------------------------------------------------------------------
const today = new Date();
const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
test(`sortDateASC`, () => {
    const items = [tomorrow, null, today];
    const sortedItems = items.sort(sorting_1.sortDateASC);
    assert.equal(sortedItems, [null, today, tomorrow]);
});
test(`sortDateDESC`, () => {
    const items = [today, tomorrow, undefined];
    const sortedItems = items.sort(sorting_1.sortDateDESC);
    assert.equal(sortedItems, [tomorrow, today, undefined]);
});
test(`sortDatePropertyASC`, () => {
    const items = [{ a: tomorrow }, { a: today }];
    const sortedItems = items.sort(sorting_1.sortDatePropertyASC('a'));
    assert.equal(sortedItems, [{ a: today }, { a: tomorrow }]);
});
test(`sortDatePropertyDESC`, () => {
    const items = [{ t: today }, { t: tomorrow }];
    const sortedItems = items.sort(sorting_1.sortDatePropertyDESC('t'));
    assert.equal(sortedItems, [{ t: tomorrow }, { t: today }]);
});
test.run();
