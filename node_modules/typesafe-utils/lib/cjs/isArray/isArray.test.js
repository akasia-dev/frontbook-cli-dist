"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isArray_1 = require("./isArray");
const test = uvu_1.suite('isArray');
// isArray ------------------------------------------------------------------------------------------------------------
const items = ['test', { prop: 0 }, null, undefined, true, {}, [123, 77], 0, 123, false, '', []];
test(`isArray`, () => {
    const filteredItems = items.filter(isArray_1.isArray);
    assert.ok(filteredItems.length === 2);
    assert.ok(filteredItems[0] && filteredItems[0].length === 2);
    assert.ok(filteredItems[1] && filteredItems[1].length === 0);
});
const onlyArrays = items.filter(isArray_1.isArray);
onlyArrays[0] && onlyArrays[0][0] && onlyArrays[0][0].toFixed();
// isArrayEmpty -------------------------------------------------------------------------------------------------------
test(`isArrayEmpty`, () => {
    assert.equal(isArray_1.isArrayEmpty([]), true);
    assert.equal(isArray_1.isArrayEmpty([123, 123]), false);
});
const emptyArray = [];
if (isArray_1.isArrayEmpty(emptyArray)) {
    emptyArray.length === 0;
}
// isArrayNotEmpty ----------------------------------------------------------------------------------------------------
test(`isArrayNotEmpty`, () => {
    assert.equal(isArray_1.isArrayNotEmpty([]), false);
    assert.equal(isArray_1.isArrayNotEmpty([123, 123]), true);
});
const nonEmptyArray = ['hi'];
if (isArray_1.isArrayNotEmpty(nonEmptyArray)) {
    nonEmptyArray[0].toUpperCase();
}
test.run();
