"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const deepClone_1 = require("./deepClone");
const assert = __importStar(require("uvu/assert"));
const test = uvu_1.suite('deepClone');
const check = (toClone) => assert.equal(deepClone_1.deepClone(toClone), toClone);
// primitives ---------------------------------------------------------------------------------------------------------
test('null', () => check(null));
test('undefined', () => check(undefined));
test('boolean true', () => check(true));
test('boolean false', () => check(false));
test('number 0', () => check(0));
test('number 1', () => check(1));
test('number -123', () => check(-123));
test('infinity', () => check(Infinity));
test('negativ infinity', () => check(-Infinity));
test('string', () => check('test'));
test('string with spaces', () => check('this is a with some spaces'));
// arrays -------------------------------------------------------------------------------------------------------------
test('empty array', () => check([]));
test('array with single value', () => check([5]));
test('array with multiple value', () => check([1, 5, 8]));
test('array with mixed values', () => check([null, 'test', 3]));
test('nested empty arrays', () => check([[[[]], []]]));
test('nested arrays with values', () => check([[true], [123, [5]]]));
// objects ------------------------------------------------------------------------------------------------------------
test('empty object', () => check({}));
test('object with single attribute', () => check({ prop: 'test' }));
test('object with multiple attributes', () => check({ a: 2, b: Infinity }));
test('nested empty objects', () => check({ a: { b: { c: { d: {} } } } }));
test.run();
