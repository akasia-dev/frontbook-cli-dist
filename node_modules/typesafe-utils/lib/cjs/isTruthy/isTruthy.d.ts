import { FalsyType, TypeGuard, TypeGuardInverted } from '../types';
export declare type Truthy<T> = TypeGuardInverted<FalsyType, T>;
export declare type Falsy<T> = TypeGuard<FalsyType, T>;
export declare const isTruthy: <T>(value: T) => value is TypeGuardInverted<FalsyType, T>;
export declare const isFalsy: <T>(value: T) => value is TypeGuard<FalsyType, T>;
export declare const isPropertyTruthy: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyFalsy: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesTruthy: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesFalsy: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
