"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isTruthy_1 = require("./isTruthy");
const test = uvu_1.suite('truthy');
const truthyValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}];
const falsyValues = [undefined, null, 0, '', false];
// isTruthy -----------------------------------------------------------------------------------------------------------
truthyValues.forEach((value) => test(`isTruthy ${value}`, () => assert.ok(isTruthy_1.isTruthy(value))));
falsyValues.forEach((value) => test(`! isTruthy ${value}`, () => assert.not(isTruthy_1.isTruthy(value))));
const _truthyType = [...truthyValues, falsyValues].filter(isTruthy_1.isTruthy);
const _notFalsyType = falsyValues.filter(isTruthy_1.isTruthy);
// isFalsy ------------------------------------------------------------------------------------------------------------
falsyValues.forEach((value) => test(`isFalsy ${value}`, () => assert.ok(isTruthy_1.isFalsy(value))));
truthyValues.forEach((value) => test(`! isFalsy ${value}`, () => assert.not(isTruthy_1.isFalsy(value))));
// const _allNotType: (null | undefined | '' | 0 | false)[] = [...truthyValues, ...falsyValues].filter(isFalsy)
const _neverNotType = truthyValues.filter(isTruthy_1.isFalsy);
// isPropertyTruthy ---------------------------------------------------------------------------------------------------
test(`isPropertyTruthy id`, () => {
    const items = [{ id: 0 }, { id: 1 }, { id: null }];
    const filteredItems = items.filter(isTruthy_1.isPropertyTruthy('id'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyFalsy ----------------------------------------------------------------------------------------------------
test(`isPropertyFalsy id`, () => {
    const items = [{ id: 0 }, { id: 1 }, { id: null }];
    const filteredItems = items.filter(isTruthy_1.isPropertyFalsy('id'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesTruthy ------------------------------------------------------------------------------------------------
test(`arePropertiesTruthy id name`, () => {
    const items = [
        { id: 0, name: 'name-1' },
        { id: 1, name: '' },
        { id: 1, name: 'name-1' },
        { id: null, name: '' },
    ];
    const filteredItems = items.filter(isTruthy_1.arePropertiesTruthy('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesFalsy -------------------------------------------------------------------------------------------------
test(`arePropertiesFalsy id name`, () => {
    const items = [
        { id: 0, name: 'name-1' },
        { id: 1, name: '' },
        { id: 1, name: 'name-1' },
        { id: null, name: '' },
    ];
    const filteredItems = items.filter(isTruthy_1.arePropertiesFalsy('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
test.run();
