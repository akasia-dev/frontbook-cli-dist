"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isFalse_1 = require("./isFalse");
const test = uvu_1.suite('false');
const falseValues = [false];
const notFalseValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}, undefined, null, 0, ''];
// isFalse ------------------------------------------------------------------------------------------------------------
falseValues.forEach((value) => test(`isFalse ${value}`, () => assert.ok(isFalse_1.isFalse(value))));
notFalseValues.forEach((value) => test(`! isFalse ${value}`, () => assert.not(isFalse_1.isFalse(value))));
const _falseType = [...falseValues, notFalseValues].filter(isFalse_1.isFalse);
const _neverType = notFalseValues.filter(isFalse_1.isFalse);
// isNotFalse ---------------------------------------------------------------------------------------------------------
notFalseValues.forEach((value) => test(`isNotFalse ${value}`, () => assert.ok(isFalse_1.isNotFalse(value))));
falseValues.forEach((value) => test(`! isNotFalse ${value}`, () => assert.not(isFalse_1.isNotFalse(value))));
const _allNotType = [...falseValues, ...notFalseValues].filter(isFalse_1.isNotFalse);
// const _neverNotType: never[] = falseValues.filter(isNotFalse)
// isPropertyFalse ----------------------------------------------------------------------------------------------------
test(`isPropertyTrue available`, () => {
    const items = [{ available: false }, { available: '' }, { available: undefined }];
    const filteredItems = items.filter(isFalse_1.isPropertyFalse('available'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotFalse -------------------------------------------------------------------------------------------------
test(`isPropertyNotFalse available`, () => {
    const items = [{ available: false }, { available: true }, { available: null }];
    const filteredItems = items.filter(isFalse_1.isPropertyNotFalse('available'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesFalse -------------------------------------------------------------------------------------------------
test(`arePropertiesFalse available inStock`, () => {
    const items = [
        { available: true, inStock: false },
        { available: false, inStock: false },
        { available: true, inStock: true },
        { available: null, inStock: false },
    ];
    const filteredItems = items.filter(isFalse_1.arePropertiesFalse('available', 'inStock'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotFalse ----------------------------------------------------------------------------------------------
test(`arePropertiesNotFalse available inStock`, () => {
    const items = [
        { available: true, inStock: false },
        { available: false, inStock: false },
        { available: true, inStock: true },
        { available: null, inStock: true },
    ];
    const filteredItems = items.filter(isFalse_1.arePropertiesNotFalse('available', 'inStock'));
    assert.ok(filteredItems.length === 2);
});
test.run();
