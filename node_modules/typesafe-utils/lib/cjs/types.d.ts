export declare type Everything = {} | null | undefined;
export declare type FalsyType = false | '' | 0 | null | undefined;
export declare type TypeGuard<Guard, Type> = Type extends Guard ? Type : never;
export declare type TypeGuardWithReturnType<Guard, Type, ReturnType = Type> = Type extends Guard ? Type extends ReturnType ? Type : ReturnType : never;
export declare type TypeGuardInverted<Guard, Type> = Type extends Guard ? never : Type;
export declare type TypeGuardInvertedWithReturnType<Guard, Type, ReturnType = Type> = Type extends Guard ? never : Type extends ReturnType ? Type : ReturnType;
export declare type FilterFn<InputType, ReturnType extends InputType = InputType> = ((value: InputType, i?: number, array?: InputType[]) => boolean) | ((value: InputType, i?: number, array?: InputType[]) => value is ReturnType);
export declare type InferType<OriginalType> = OriginalType extends infer InferredType ? InferredType : OriginalType;
