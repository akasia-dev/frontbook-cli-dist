import { TypeGuard, TypeGuardInverted } from '../types';
export declare const isUndefined: <T>(value: T) => value is TypeGuard<undefined, T>;
export declare const isNotUndefined: <T>(value: T) => value is TypeGuardInverted<undefined, T>;
export declare const isPropertyUndefined: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotUndefined: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesUndefined: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotUndefined: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
