"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const isUndefined_1 = require("./isUndefined");
const test = uvu_1.suite('undefined');
const undefinedValues = [undefined];
const notUndefinedValues = [-Infinity, -1, 1, Infinity, 'test', true, [], {}, null, 0, '', false];
// isUndefined --------------------------------------------------------------------------------------------------------
undefinedValues.forEach((value) => test(`isUndefined ${value}`, () => assert.ok(isUndefined_1.isUndefined(value))));
notUndefinedValues.forEach((value) => test(`! isUndefined ${value}`, () => assert.not(isUndefined_1.isUndefined(value))));
const _undefinedType = [...undefinedValues, notUndefinedValues].filter(isUndefined_1.isUndefined);
const _neverType = notUndefinedValues.filter(isUndefined_1.isUndefined);
// isNotUndefined -----------------------------------------------------------------------------------------------------
notUndefinedValues.forEach((value) => test(`isNotUndefined ${value}`, () => assert.ok(isUndefined_1.isNotUndefined(value))));
undefinedValues.forEach((value) => test(`! isNotUndefined ${value}`, () => assert.not(isUndefined_1.isNotUndefined(value))));
const _allNotType = [...undefinedValues, ...notUndefinedValues].filter(isUndefined_1.isNotUndefined);
const _neverNotType = undefinedValues.filter(isUndefined_1.isNotUndefined);
// isPropertyUndefined ------------------------------------------------------------------------------------------------
test(`isPropertyUndefined id`, () => {
    const items = [{ id: 0 }, { id: undefined }, { id: null }];
    const filteredItems = items.filter(isUndefined_1.isPropertyUndefined('id'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotUndefined ---------------------------------------------------------------------------------------------
test(`isPropertyNotUndefined id`, () => {
    const items = [{ id: undefined }, { id: 1 }, { id: null }];
    const filteredItems = items.filter(isUndefined_1.isPropertyNotUndefined('id'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesUndefined ---------------------------------------------------------------------------------------------
test(`arePropertiesUndefined id name`, () => {
    const items = [
        { id: 0, name: undefined },
        { id: 12, name: 'name-1' },
        { id: undefined, name: undefined },
        { id: null, name: undefined },
    ];
    const filteredItems = items.filter(isUndefined_1.arePropertiesUndefined('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotUndefined ------------------------------------------------------------------------------------------
test(`arePropertiesNotUndefined id name`, () => {
    const items = [
        { id: 0, name: undefined },
        { id: 12, name: 'name-1' },
        { id: undefined, name: undefined },
        { id: null, name: undefined },
    ];
    const filteredItems = items.filter(isUndefined_1.arePropertiesNotUndefined('id', 'name'));
    assert.ok(filteredItems.length === 1);
});
test.run();
