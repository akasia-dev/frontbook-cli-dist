"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uvu_1 = require("uvu");
const assert = __importStar(require("uvu/assert"));
const __1 = require("..");
const isNull_1 = require("../isNull/isNull");
const isNumber_1 = require("../isNumber/isNumber");
const isString_1 = require("../isString/isString");
const isTruthy_1 = require("../isTruthy/isTruthy");
const logical_1 = require("./logical");
const test = uvu_1.suite('logical');
const items = ['test', { prop: 0 }, null, undefined, true, {}, 0, 123, false, ''];
// and ----------------------------------------------------------------------------------------------------------------
test(`and truthy`, () => {
    const filteredItems = items.filter(logical_1.and(isTruthy_1.isTruthy, isTruthy_1.isFalsy));
    assert.ok(filteredItems.length === 0);
});
test(`and isNumber && equals 4`, () => {
    const filteredItems = [1.5, 4, -4, 6, 4].filter(logical_1.and(isNumber_1.isNumber, (value) => value === 4));
    assert.ok(filteredItems.length === 2);
});
// or -----------------------------------------------------------------------------------------------------------------
test(`or truthy`, () => {
    const filteredItems = items.filter(logical_1.or(isTruthy_1.isTruthy, isTruthy_1.isFalsy));
    assert.ok(filteredItems.length === items.length);
});
test(`and isString || isNull`, () => {
    const filteredItems = ['', null, 'test', 55, undefined].filter(logical_1.or(isString_1.isString, isNull_1.isNull));
    assert.ok(filteredItems.length === 3);
});
// not ----------------------------------------------------------------------------------------------------------------
test(`not isNull`, () => {
    const items = [1, 5, 8, 5, 33, null];
    const filteredItems = items.filter(logical_1.not(isNull_1.isNull));
    assert.ok(filteredItems.length === 5);
});
test(`not isNotNull`, () => {
    const items = [1, 5, 8, 5, 33, null];
    const filteredItems = items.filter(logical_1.not(isNull_1.isNotNull));
    assert.ok(filteredItems.length === 1);
});
const _explicitType = [null, 123].filter(logical_1.not(isNull_1.isNotNull));
const _autoType = [123, undefined].filter(logical_1.not(__1.isNotUndefined));
test.run();
