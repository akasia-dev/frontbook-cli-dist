import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { isTrue, isNotTrue, isPropertyNotTrue, isPropertyTrue, arePropertiesTrue, arePropertiesNotTrue } from './isTrue';
const test = suite('true');
const trueValues = [true];
const notTrueValues = [-Infinity, -1, 1, Infinity, 'test', [], {}, undefined, null, 0, '', false];
// isTrue -------------------------------------------------------------------------------------------------------------
trueValues.forEach((value) => test(`isTrue ${value}`, () => assert.ok(isTrue(value))));
notTrueValues.forEach((value) => test(`! isTrue ${value}`, () => assert.not(isTrue(value))));
const _trueType = [...trueValues, notTrueValues].filter(isTrue);
const _neverType = notTrueValues.filter(isTrue);
// isNotTrue ----------------------------------------------------------------------------------------------------------
notTrueValues.forEach((value) => test(`isNotTrue ${value}`, () => assert.ok(isNotTrue(value))));
trueValues.forEach((value) => test(`! isNotTrue ${value}`, () => assert.not(isNotTrue(value))));
const _allNotType = [...trueValues, ...notTrueValues].filter(isNotTrue);
// const _neverNotType: never[] = trueValues.filter(isNotTrue)
// isPropertyTrue -----------------------------------------------------------------------------------------------------
test(`isPropertyTrue available`, () => {
    const items = [{ available: true }, { available: 'some-id' }, { available: null }];
    const filteredItems = items.filter(isPropertyTrue('available'));
    assert.ok(filteredItems.length === 1);
});
// isPropertyNotTrue --------------------------------------------------------------------------------------------------
test(`isPropertyNotTrue available`, () => {
    const items = [{ available: 0 }, { available: true }, { available: null }];
    const filteredItems = items.filter(isPropertyNotTrue('available'));
    assert.ok(filteredItems.length === 2);
});
// arePropertiesTrue --------------------------------------------------------------------------------------------------
test(`arePropertiesTrue available inStock`, () => {
    const items = [
        { available: 'some-id', inStock: true },
        { available: true, inStock: true },
        { available: 'some-id', inStock: false },
        { available: null, inStock: true },
    ];
    const filteredItems = items.filter(arePropertiesTrue('available', 'inStock'));
    assert.ok(filteredItems.length === 1);
});
// arePropertiesNotTrue -----------------------------------------------------------------------------------------------
test(`arePropertiesNotTrue available inStock`, () => {
    const items = [
        { available: 'some-id', inStock: true },
        { available: true, inStock: true },
        { available: 'some-id', inStock: false },
        { available: null, inStock: true },
    ];
    const filteredItems = items.filter(arePropertiesNotTrue('available', 'inStock'));
    assert.ok(filteredItems.length === 1);
});
test.run();
