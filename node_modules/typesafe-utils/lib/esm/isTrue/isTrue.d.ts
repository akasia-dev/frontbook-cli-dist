import { TypeGuard, TypeGuardInverted } from '../types';
export declare const isTrue: <T>(value: T) => value is TypeGuard<true, T>;
export declare const isNotTrue: <T>(value: T) => value is TypeGuardInverted<true, T>;
export declare const isPropertyTrue: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotTrue: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesTrue: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotTrue: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
