declare type NumberType = number | undefined | null;
export declare const sortNumberASC: (a?: NumberType, b?: NumberType) => number;
export declare const sortNumberPropertyASC: <T extends { [key in K]?: NumberType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
export declare const sortNumberDESC: (a?: NumberType, b?: NumberType) => number;
export declare const sortNumberPropertyDESC: <T extends { [key in K]?: NumberType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
declare type StringType = string | undefined | null;
export declare const sortStringASC: (a?: StringType, b?: StringType) => number;
export declare const sortStringPropertyASC: <T extends { [key in K]?: StringType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
export declare const sortStringDESC: (a?: StringType, b?: StringType) => number;
export declare const sortStringPropertyDESC: <T extends { [key in K]?: StringType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
declare type DateType = Date | undefined | null;
export declare const sortDateASC: (a?: DateType, b?: DateType) => number;
export declare const sortDatePropertyASC: <T extends { [key in K]?: DateType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
export declare const sortDateDESC: (a?: DateType, b?: DateType) => number;
export declare const sortDatePropertyDESC: <T extends { [key in K]?: DateType; }, K extends keyof T = keyof T>(property: K) => ({ [property]: a }: T, { [property]: b }: T) => number;
export {};
