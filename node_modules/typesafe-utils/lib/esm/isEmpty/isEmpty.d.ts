import { TypeGuardWithReturnType, TypeGuardInverted } from '../types';
export declare const isEmpty: <T>(value: "" | T) => value is TypeGuardWithReturnType<string, T, "">;
export declare const isNotEmpty: <T>(value: T) => value is TypeGuardInverted<string, T>;
export declare const isPropertyEmpty: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotEmpty: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesEmpty: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotEmpty: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
