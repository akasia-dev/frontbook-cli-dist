import { TypeGuard, TypeGuardInverted } from '../types';
export declare const isFalse: <T>(value: T) => value is TypeGuard<false, T>;
export declare const isNotFalse: <T>(value: T) => value is TypeGuardInverted<false, T>;
export declare const isPropertyFalse: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const isPropertyNotFalse: <T, K extends keyof T = keyof T>(property: K) => (value: T) => boolean;
export declare const arePropertiesFalse: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
export declare const arePropertiesNotFalse: <T, K extends keyof T = keyof T>(...properties: K[]) => (value: T) => boolean;
