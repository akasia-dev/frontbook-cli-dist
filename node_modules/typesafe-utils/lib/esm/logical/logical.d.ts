import type { FilterFn } from '../types';
export declare const and: <U extends T, T>(...filters: FilterFn<any, any>[]) => (value: T, index?: number | undefined, array?: T[] | undefined) => value is U;
export declare const or: <T, U extends T = T>(...filters: FilterFn<any, any>[]) => (value: T, index?: number | undefined, array?: T[] | undefined) => value is U;
export declare const not: <U extends T, T = any, F extends FilterFn<T, U> = FilterFn<T, U>>(filterFn: F) => (value: T, i?: number | undefined, array?: T[] | undefined) => value is U;
