import { isPluralPart } from './core.mjs';
export const removeEmptyValues = (object) => Object.fromEntries(Object.entries(object)
    .map(([key, value]) => key !== 'i' && value && value != '0' && [key, value])
    .filter(Boolean));
export const trimAllValues = (part) => Object.fromEntries(Object.keys(part).map((key) => {
    var _a;
    const val = part[key];
    return [
        key,
        Array.isArray(val) ? val.map((v) => v === null || v === void 0 ? void 0 : v.trim()) : val === !!val ? val : (_a = val) === null || _a === void 0 ? void 0 : _a.trim(),
    ];
}));
export const partsAsStringWithoutTypes = (parts) => parts.map(partAsStringWithoutTypes).join('');
export const partAsStringWithoutTypes = (part) => {
    var _a;
    if (typeof part === 'string') {
        return part;
    }
    if (isPluralPart(part)) {
        return `{{${[part.z, part.o, part.t, part.f, part.m, part.r].filter((value) => value !== undefined).join('|')}}}`;
    }
    return `{${part.k}${part.n ? '?' : ''}${((_a = part.f) === null || _a === void 0 ? void 0 : _a.length) ? `|${part.f.join('|')}` : ''}}`;
};
export const getFallbackProxy = (prefixKey) => new Proxy((prefixKey ? () => prefixKey : {}), {
    get: (_target, key) => getFallbackProxy(prefixKey ? `${prefixKey}.${key}` : key),
});
//# sourceMappingURL=core-utils.js.map