import { translate } from './core.mjs';
import { getPartsFromString } from './util.string.mjs';
const getTextFromTranslationKey = (translations, key) => {
    var _a;
    ;
    key.split('.').forEach((k) => (translations = translations[k]));
    return (_a = translations) !== null && _a !== void 0 ? _a : key;
};
const getTranslateInstance = (locale, translations, formatters) => {
    const cache = {};
    const pluralRules = new Intl.PluralRules(locale);
    return (key, ...args) => translate(getPartsFromString(cache, getTextFromTranslationKey(translations, key)), pluralRules, formatters, args);
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
export function i18nObject(locale, translations, formatters = {}) {
    return createProxy(getTranslateInstance(locale, translations, formatters));
}
const createProxy = (fn, prefixKey, proxyObject = {}) => new Proxy((prefixKey ? fn.bind(null, prefixKey) : proxyObject), {
    get: (target, key) => !(target === proxyObject && key === 'then') && createProxy(fn, prefixKey ? `${prefixKey}.${key}` : key),
});
//# sourceMappingURL=util.object.js.map