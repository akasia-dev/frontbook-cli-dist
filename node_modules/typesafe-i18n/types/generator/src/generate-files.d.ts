import type { BaseTranslation } from '../../core/src/core';
import { Logger, TypescriptVersion } from './generator-util';
declare type Adapters = 'angular' | 'node' | 'react' | 'svelte';
export declare type OutputFormats = 'TypeScript' | 'JavaScript';
export declare type GeneratorConfig = {
    baseLocale?: string;
    tempPath?: string;
    outputPath?: string;
    outputFormat?: OutputFormats;
    typesFileName?: string;
    utilFileName?: string;
    formattersTemplateFileName?: string;
    typesTemplateFileName?: string;
    esmImports?: boolean;
    adapter?: Adapters;
    adapterFileName?: string;
    loadLocalesAsync?: boolean;
    generateOnlyTypes?: boolean;
    banner?: string;
};
export declare type RollupConfig = {
    locales?: string[];
};
export declare type Config = GeneratorConfig & RollupConfig;
export declare type GeneratorConfigWithDefaultValues = GeneratorConfig & {
    baseLocale: string;
    locales: string[];
    tempPath: string;
    outputPath: string;
    outputFormat: OutputFormats;
    typesFileName: string;
    utilFileName: string;
    formattersTemplateFileName: string;
    typesTemplateFileName: string;
    esmImports: boolean;
    loadLocalesAsync: boolean;
    generateOnlyTypes: boolean;
    banner: string;
};
export declare const readConfig: (config?: GeneratorConfig | undefined) => Promise<Config>;
export declare const getConfigWithDefaultValues: (config?: Config | undefined) => Promise<GeneratorConfigWithDefaultValues>;
export declare const generate: (translations: BaseTranslation, config: GeneratorConfigWithDefaultValues | undefined, version: TypescriptVersion, logger?: Logger, forceOverride?: boolean) => Promise<void>;
export {};
