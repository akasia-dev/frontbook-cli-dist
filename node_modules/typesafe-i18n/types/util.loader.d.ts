import type { BaseFormatters, BaseTranslation, Locale, TranslationFunctions } from './core';
export declare type LocaleTranslationFunctions<L extends Locale = Locale, TF extends TranslationFunctions = TranslationFunctions> = {
    [key in L]: TF;
};
export declare type LocaleTranslations<L extends Locale, T = unknown> = {
    [key in L]: T;
};
export declare type TranslationLoader<L extends Locale, T extends BaseTranslation> = (locale: L) => T;
export declare type TranslationLoaderAsync<L extends Locale, T extends BaseTranslation> = (locale: L) => Promise<T>;
export declare type FormattersInitializer<L extends Locale, F extends BaseFormatters> = (locale: L) => F;
export declare type AsyncFormattersInitializer<L extends Locale, F extends BaseFormatters> = (locale: L) => Promise<F>;
export declare const i18nObjectLoaderAsync: <L extends string, T extends BaseTranslation, TF extends TranslationFunctions<T>, F extends BaseFormatters>(locale: L, getTranslationForLocale: TranslationLoaderAsync<L, T>, formattersInitializer: FormattersInitializer<L, F> | AsyncFormattersInitializer<L, F>) => Promise<TF>;
export declare const i18nObjectLoader: <L extends string, T extends BaseTranslation, TF extends TranslationFunctions<T>, F extends BaseFormatters>(locale: L, getTranslationForLocale: TranslationLoader<L, T>, formattersInitializer: FormattersInitializer<L, F>) => TF;
